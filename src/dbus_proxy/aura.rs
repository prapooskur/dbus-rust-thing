//! # DBus interface proxy for: `org.asuslinux.Daemon`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `Interface '/org/asuslinux/Aura' from service 'org.asuslinux.Daemon' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::dbus_proxy;

#[dbus_proxy(
interface = "org.asuslinux.Daemon",
default_service = "org.asuslinux.Daemon",
default_path = "/org/asuslinux/Aura"
)]
trait Aura {
    /// DeviceType method
    fn device_type(&self) -> zbus::Result<String>;

    /// DirectAddressingRaw method
    fn direct_addressing_raw(&self, data: &[&[u8]]) -> zbus::Result<()>;

    /// LedMode method
    fn led_mode(&self) -> zbus::Result<String>;

    /// LedModes method
    fn led_modes(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, (String, String, (u8, u8, u8), (u8, u8, u8), String, String)>>;

    /// LedPower method
    fn led_power(
        &self,
    ) -> zbus::Result<(Vec<String>, Vec<String>, (String, bool, bool, bool, bool))>;

    /// NextLedBrightness method
    fn next_led_brightness(&self) -> zbus::Result<()>;

    /// NextLedMode method
    fn next_led_mode(&self) -> zbus::Result<()>;

    /// PrevLedBrightness method
    fn prev_led_brightness(&self) -> zbus::Result<()>;

    /// PrevLedMode method
    fn prev_led_mode(&self) -> zbus::Result<()>;

    /// SetBrightness method
    fn set_brightness(&self, brightness: &str) -> zbus::Result<()>;

    /// SetLedMode method
    fn set_led_mode(&self, effect: &(&str, &str, (u8, u8, u8))) -> zbus::Result<()>;

    /// SetLedPower method
    /*
    fn set_led_power(
        &self,
        options: &(&[&str], &[&str], (&str, bool, bool, bool, bool)),
        enabled: bool,
    ) -> zbus::Result<()>;

     */

    /// NotifyLed signal
    #[dbus_proxy(signal)]
    fn notify_led(&self, data: (&str, &str, (u8, u8, u8))) -> zbus::Result<()>;

    /// NotifyPowerStates signal
    /*
    #[dbus_proxy(signal)]
    fn notify_power_states(
        &self,
        data: (&[&str], &[&str], (&str, bool, bool, bool, bool)),
    ) -> zbus::Result<()>;

     */

    /// LedBrightness property
    #[dbus_proxy(property)]
    fn led_brightness(&self) -> zbus::Result<i16>;
}
