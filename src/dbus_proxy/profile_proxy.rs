//! # DBus interface proxy for: `org.asuslinux.Daemon`
//!
//! This code was generated by `zbus-xmlgen` `3.1.1` from DBus introspection data.
//! Source: `Interface '/org/asuslinux/Profile' from service 'org.asuslinux.Daemon' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the
//! [Writing a client proxy](https://dbus.pages.freedesktop.org/zbus/client.html)
//! section of the zbus documentation.
//!
//! This DBus object implements
//! [standard DBus interfaces](https://dbus.freedesktop.org/doc/dbus-specification.html),
//! (`org.freedesktop.DBus.*`) for which the following zbus proxies can be used:
//!
//! * [`zbus::fdo::PeerProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//!
//! â€¦consequently `zbus-xmlgen` did not generate code for the above interfaces.

use zbus::{dbus_proxy};

#[dbus_proxy(
interface = "org.asuslinux.Daemon",
default_service = "org.asuslinux.Daemon",
default_path = "/org/asuslinux/Profile"
)]
trait Profile {
    /// ActiveProfile method
    fn active_profile(&self) -> zbus::Result<String>;

    /// FanCurveData method
    fn fan_curve_data(
        &self,
        profile: &str,
    ) -> zbus::Result<Vec<(String, (u8, u8, u8, u8, u8, u8, u8, u8))>>;

    /// NextProfile method
    fn next_profile(&self) -> zbus::Result<()>;

    /// Profiles method
    fn profiles(&self) -> zbus::Result<Vec<String>>;

    /// ResetProfileCurves method
    fn reset_profile_curves(&self, profile: &str) -> zbus::Result<()>;

    /// SetActiveCurveToDefaults method
    fn set_active_curve_to_defaults(&self) -> zbus::Result<()>;

    /// SetActiveProfile method
    fn set_active_profile(&self, profile: &str) -> zbus::Result<()>;

    /// SetFanCurve method
    fn set_fan_curve(
        &self,
        profile: &str,
        curve: &(&str, (u8, u8, u8, u8, u8, u8, u8, u8)),
    ) -> zbus::Result<()>;

    /// SetFanCurvesEnabled method
    fn set_fan_curves_enabled(&self, profile: &str, enabled: bool) -> zbus::Result<()>;

    /// SetProfileFanCurveEnabled method
    fn set_profile_fan_curve_enabled(
        &self,
        profile: &str,
        fan: &str,
        enabled: bool,
    ) -> zbus::Result<()>;

    /// NotifyProfile signal
    #[dbus_proxy(signal)]
    fn notify_profile(&self, profile: &str) -> zbus::Result<()>;
}